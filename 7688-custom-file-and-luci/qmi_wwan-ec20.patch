--- qmi_wwan.c	2018-08-16 00:13:02.000000000 +0800
+++ qmi_wwan-ec20.c	2019-01-22 10:59:14.000000000 +0800
@@ -76,6 +76,25 @@ struct qmimux_priv {
 	u8 mux_id;
 };
 
+#if 1 //Added by Quectel 
+#include <linux/etherdevice.h> 
+struct sk_buff *qmi_wwan_tx_fixup(struct usbnet *dev, struct sk_buff *skb, gfp_t flags) 
+{ 
+	 if (dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C)) 
+		return skb; 
+	 // Skip Ethernet header from message 
+	 if (skb_pull(skb, ETH_HLEN)) { 
+		return skb; 
+	 } else { 
+		dev_err(&dev->intf->dev, "Packet Dropped "); 
+	 } 
+	 // Filter the packet out, release it 
+	 dev_kfree_skb_any(skb); 
+	 return NULL; 
+} 
+#endif
+
+
 static int qmimux_open(struct net_device *dev)
 {
 	struct qmimux_priv *priv = netdev_priv(dev);
@@ -740,6 +759,23 @@ static int qmi_wwan_bind(struct usbnet *
 	}
 	dev->net->netdev_ops = &qmi_wwan_netdev_ops;
 	dev->net->sysfs_groups[0] = &qmi_wwan_sysfs_attr_group;
+	
+#if 1 //Added by Quectel
+	 if (dev->udev->descriptor.idVendor == cpu_to_le16(0x2C7C)) { 
+	 dev_info(&intf->dev, "Quectel EC25&EC21&EG91&EG95&EG06&EP06&EM06&BG96&AG35 work on RawIP mode\n"); 
+	 dev->net->flags |= IFF_NOARP; 
+
+	 usb_control_msg( 
+		 interface_to_usbdev(intf), 
+		 usb_sndctrlpipe(interface_to_usbdev(intf), 0), 
+		 0x22, //USB_CDC_REQ_SET_CONTROL_LINE_STATE 
+		 0x21, //USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE 
+		 1, //active CDC DTR 
+		 intf->cur_altsetting->desc.bInterfaceNumber, 
+		 NULL, 0, 100); 
+	 }
+#endif 
+
 err:
 	return status;
 }
@@ -831,6 +867,9 @@ static const struct driver_info	qmi_wwan
 	.unbind		= qmi_wwan_unbind,
 	.manage_power	= qmi_wwan_manage_power,
 	.rx_fixup       = qmi_wwan_rx_fixup,
+#if 1 //Added by Quectel 
+	.tx_fixup = qmi_wwan_tx_fixup, 
+#endif
 };
 
 static const struct driver_info	qmi_wwan_info_quirk_dtr = {
@@ -1250,7 +1289,7 @@ static const struct usb_device_id produc
 	{QMI_FIXED_INTF(0x03f0, 0x9d1d, 1)},	/* HP lt4120 Snapdragon X5 LTE */
 	{QMI_FIXED_INTF(0x22de, 0x9061, 3)},	/* WeTelecom WPD-600N */
 	{QMI_FIXED_INTF(0x1e0e, 0x9001, 5)},	/* SIMCom 7230E */
-	{QMI_QUIRK_SET_DTR(0x2c7c, 0x0125, 4)},	/* Quectel EC25, EC20 R2.0  Mini PCIe */
+	{QMI_FIXED_INTF(0x2c7c, 0x0125, 4)},	/* Quectel EC25, EC20 R2.0  Mini PCIe */
 	{QMI_QUIRK_SET_DTR(0x2c7c, 0x0121, 4)},	/* Quectel EC21 Mini PCIe */
 	{QMI_QUIRK_SET_DTR(0x2c7c, 0x0191, 4)},	/* Quectel EG91 */
 	{QMI_FIXED_INTF(0x2c7c, 0x0296, 4)},	/* Quectel BG96 */
@@ -1284,7 +1323,7 @@ static const struct usb_device_id produc
 	{QMI_GOBI_DEVICE(0x05c6, 0x9225)},	/* Sony Gobi 2000 Modem device (N0279, VU730) */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9245)},	/* Samsung Gobi 2000 Modem device (VL176) */
 	{QMI_GOBI_DEVICE(0x03f0, 0x251d)},	/* HP Gobi 2000 Modem device (VP412) */
-	{QMI_GOBI_DEVICE(0x05c6, 0x9215)},	/* Acer Gobi 2000 Modem device (VP413) */
+	//{QMI_GOBI_DEVICE(0x05c6, 0x9215)},	/* Acer Gobi 2000 Modem device (VP413) */
 	{QMI_FIXED_INTF(0x05c6, 0x9215, 4)},	/* Quectel EC20 Mini PCIe */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9265)},	/* Asus Gobi 2000 Modem device (VR305) */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9235)},	/* Top Global Gobi 2000 Modem device (VR306) */
@@ -1360,7 +1399,7 @@ static int qmi_wwan_probe(struct usb_int
 
 	/* Quectel EC20 quirk where we've QMI on interface 4 instead of 0 */
 	if (quectel_ec20_detected(intf) && desc->bInterfaceNumber == 0) {
-		dev_dbg(&intf->dev, "Quectel EC20 quirk, skipping interface 0\n");
+		dev_dbg(&intf->dev, "Quectel EC20 05c6:9215 quirk, skipping interface 0\n");
 		return -ENODEV;
 	}
 
